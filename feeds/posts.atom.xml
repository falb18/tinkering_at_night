<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tinkering At Night - posts</title><link href="/" rel="alternate"></link><link href="/feeds/posts.atom.xml" rel="self"></link><id>/</id><updated>2025-08-20T00:00:00-06:00</updated><entry><title>Five years of Tinkering At Night</title><link href="/five-years-blog.html" rel="alternate"></link><published>2025-08-20T00:00:00-06:00</published><updated>2025-08-20T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2025-08-20:/five-years-blog.html</id><summary type="html">&lt;p&gt;An introspection about my blog, the events of these five years, and the future plan.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is an introspection about my blog and the events of the past few years that have impacted me. Also I reflect on my future plans for both my personal projects and the blog itself.&lt;/p&gt;
&lt;p&gt;(Screenshot of the blog on a computer)&lt;/p&gt;
&lt;p&gt;(Screen of the blog on a smartphone)&lt;/p&gt;
&lt;h2 id="about how do i feel of this blog"&gt;About how do I feel of this blog&lt;/h2&gt;
&lt;p&gt;It's been &lt;strong&gt;&lt;em&gt;five&lt;/em&gt;&lt;/strong&gt; years since I started this blog, and I have mixed feelings about it. Overall, it's been a good experience writing about my personal projects, and I was even glad to hear that someone found one of my posts useful. However, I have a few complaints with myself. I'm constantly &lt;strong&gt;&lt;em&gt;tinkering at night&lt;/em&gt;&lt;/strong&gt;, but I don't write about it enough. Despite this, I'm happy with the journey and convinced this project has the potential to become something bigger. But first, let me tell you a quick anecdote.&lt;/p&gt;
&lt;p&gt;Two or three years back, I got an email from a guy in Germany. He was thanking me for the post called "Name of the post," and it turns out my LCD character driver setup was helpful to him. He was using it to build a Raspberry Pi cluster and display the IP address on each one. Honestly, I was so happy to know my blog was useful to someone else. It proved I'd achieved my main goal: to create content that actually helps people.&lt;/p&gt;
&lt;p&gt;Even with the acknowledgment of my work, which meant a lot to me, I haven't been publishing as frequently as I'd hoped. I tend to forget that the true purpose of this blog is to share my ongoing projects&amp;mdash;whether they are simple examples, quick demos, or comprehensive tutorials. I'm often driven to only share complex, extraordinary projects, but because those take so much time, I end up publishing very little until one is fully complete.&lt;/p&gt;
&lt;p&gt;Recently, I revisited some of the blogs I follow, many of which have been on the internet for several years. After reading posts published a decade ago or more, I realized that the valuable part is the journey you take over the years. Many of these &lt;strong&gt;&lt;em&gt;bloggers&lt;/em&gt;&lt;/strong&gt; have been posting consistently, regardless of whether their content is about huge projects, tutorials, or even personal thoughts on various matters.&lt;/p&gt;
&lt;p&gt;Something else that amazed me while reading those old blogs was seeing how much technology has evolved. And I'm not just talking about our phones or computers, but the tech we use for personal projects&amp;mdash;the stuff we mess with in our spare time. For instance, when I first got into programming microcontrollers, the well-known PIC16F84A was the go-to. But then Arduino showed up in the DIY world around 2007-2008, and it's been the foundation for most DIY projects ever since. Even the software tools, from IDEs to flashing tools, have changed completely.&lt;/p&gt;
&lt;p&gt;For me was interesting to read what people used to tinker before the Arduino, and how these people had to adapt to the new technologies. Even 3D printing didn't exist years ago so many people used scrap wood and anything they had in hand to build their projects.&lt;/p&gt;
&lt;p&gt;I found it fascinating to read about what people were tinkering with before Arduino, and to see how those same individuals adapted to new technologies. Before 3D printing, for instance, many makers had to use scrap wood and whatever materials they had on hand.&lt;/p&gt;
&lt;p&gt;With these thoughts in mind, I intend to post more often, &lt;strong&gt;&lt;em&gt;regardless of a project's complexity, usefulness, or purpose&lt;/em&gt;&lt;/strong&gt;. My main goal is to share the knowledge I acquire along the journey, but also to have a kind of diary of my personal projects.&lt;/p&gt;
&lt;h2 id="few anecdotes during these five years"&gt;Few anecdotes during these five years&lt;/h2&gt;
&lt;p&gt;Shortly after starting this blog, I moved to Monterrey, a city in the north of Mexico. I wrote about the move in a post titled "Name of the Post." I lived there for two and a half years, during which I learned many things both personally and professionally. Unfortunately, the company I worked for had to close its embedded systems division, and as a result, I was laid off in February 2024.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/five-years-blog/cerro-silla-estacion-metro.JPG"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/five-years-blog/cerro-silla-estacion-metro.JPG" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Cerro de la silla mountain. I took this photo from a subway station.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/five-years-blog/cerro-silla-estacion-metro.JPG"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/five-years-blog/cerro-silla-estacion-metro.JPG" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            MQTT network diagram
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Despite the disappointment, I went back to my parents' house in Mexico City and saw an opportunity to work on my projects. To be honest, I felt super productive because I accomplished a lot during the months I was unemployed.&lt;/p&gt;
&lt;p&gt;A few months later, I started working at the university where I studied. The head of the engineering department contacted me and asked if I could help him coordinate the engineering laboratories. I did this for two semesters, as I didn't want to stay longer because I wanted to return to the industry. Despite my short stay, the project I am most proud of is setting up the CNC machines to mill PCBs. This manufacturing process encouraged my teammates and students to design their own PCBs and, in turn, their own projects.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/five-years-blog/itam-cnc-machine.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/five-years-blog/itam-cnc-machine.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            This is a CNC 3040 that I tinker with to make PCBs on it.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;In October 2024, I attended the 2nd Maker Faire CDMX while I was working at the university. It was fascinating to see all the other projects. For the event, I created a custom Otto Makey (link to the project and my repo), and I brought it with me everywhere I went. The robot was a hit! So many people were interested in it, taking photos and constantly asking me where I had bought it.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/five-years-blog/maker-faire-cdmx-01.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/five-years-blog/maker-faire-cdmx-01.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Otto Makey promoting the Maker Faire CDMX.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/five-years-blog/maker-faire-cdmx-02.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/five-years-blog/maker-faire-cdmx-02.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            I was trying to get a good picture about my pal.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="the future for tinkering at night"&gt;The future for &lt;em&gt;Tinkering At Night&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;I've decided to open a YouTube channel to share videos of the projects I'm working on. For some projects, a video is the best way to show how they function in real time. At first, I considered just uploading videos directly to the blog, but then it occurred to me that a dedicated YouTube channel would be a better fit. I can link the videos in my posts, and it will also be a great way to bring more people to the blog.&lt;/p&gt;
&lt;p&gt;I have another goal in mind: to publish this blog in Spanish, my native language. When I was starting out with electronics and microcontrollers, I read a lot of content in English, and for a long time, I felt I should write my posts the same way. The problem is, many people in Mexico don't speak or read English. So, to connect with that audience, I'm now thinking about translating the entire website into Spanish.&lt;/p&gt;
&lt;p&gt;My final goal is to increase my posting frequency. I've decided to share my ongoing projects as I work on them, regardless of their complexity, usefulness, or completion status. The idea behind this shift is that no matter how big or small a project is, if the information might be useful to someone else, it's worth sharing on the blog.&lt;/p&gt;
&lt;p&gt;Thank you to all the people who have read one of my articles. I hope you found the information useful for your own projects. My wish is to keep posting on this blog for another five years&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Step-by-Step Guide: Installing postmarketOS on the Samsung Galaxy SIII Mini</title><link href="/pmos-samsung-s3-mini.html" rel="alternate"></link><published>2024-06-28T00:00:00-06:00</published><updated>2024-06-28T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2024-06-28:/pmos-samsung-s3-mini.html</id><summary type="html">&lt;p&gt;This post provides a step-by-step guide to install postmarketOS on the Samsung Galaxy SIII mini. By following these steps, you can potentially install postmarketOS on other similar devices.&lt;/p&gt;</summary><content type="html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I came across postmarketOS a while back. I had an old Samsung S3 Mini lying around, and I was curious if I could
repurpose it for Linux projects. However, my knowledge and skills weren't sufficient to grasp the entire installation
process. Unfortunately, there weren't many clear and concise tutorials available online. While the postmarketOS website
has documentation, I found it lacked specific examples, making it challenging to follow.&lt;/p&gt;
&lt;p&gt;My journey to postmarketOS success wasn't immediate. It wasn't until late 2023 that I successfully installed a custom
u-boot on my phone. Then, in early 2024, I was finally able to flash the kernel and root filesystem.&lt;/p&gt;
&lt;p&gt;This tutorial aims to consolidate the information I've gathered and present it as a practical guide. My goal is to
provide a clear, step-by-step example for installing postmarketOS on a smartphone.&lt;/p&gt;
&lt;p&gt;This tutorial also aims to inspire others to give their old smartphones a second life. By installing a new operating
system, you can prevent electronic waste and repurpose these devices for various projects. After all, these smartphones
are essentially small computers, packed with features similar to a Raspberry Pi, but often with additional built-in
peripherals like cameras and touchscreens.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-pmos-android.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-pmos-android.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Samsung on the left is my old smartphone running postmarketOS. On the right is a smartphone I bought specifically for this tutorial
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id="system setup"&gt;System setup&lt;/h3&gt;
&lt;p&gt;This is the setup I used for this tutorial:
- Ubuntu 23.04
- Python 3.11.4
- pmbootstrap 2.3.0&lt;/p&gt;
&lt;h2 id="flashing a custom u-boot on the samsung s3 mini"&gt;Flashing a custom u-boot on the Samsung S3 mini&lt;/h2&gt;
&lt;p&gt;First, we need to flash a custom u-boot. This step is important because it allows us to then flash and boot the
postmarketOS kernel. Here are the steps to flash it on the device:&lt;/p&gt;
&lt;h3 id="install heimdall tool"&gt;Install &lt;em&gt;heimdall&lt;/em&gt; tool&lt;/h3&gt;
&lt;p&gt;To flash the custom u-boot, we'll need a tool called &lt;strong&gt;&lt;em&gt;heimdall&lt;/em&gt;&lt;/strong&gt;. You can install it on your computer by running the
following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install heimdall-flash
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="testing heimdall tool"&gt;Testing heimdall tool&lt;/h4&gt;
&lt;p&gt;Before installing the custom u-boot, we need to verify that your computer can detect the device. Here's how to enter
download mode on your Samsung S3 Mini:
- Power off the smartphone completely.
- Boot into download mode. To do this, press and hold the following keys simultaneously: &lt;strong&gt;VOLUME DOWN&lt;/strong&gt; + &lt;strong&gt;HOME&lt;/strong&gt; + &lt;strong&gt;POWER&lt;/strong&gt;&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-download-mode-01.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-download-mode-01.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            First screen of the download mode
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Press the key &lt;strong&gt;VOLUME UP&lt;/strong&gt; to continue.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-download-mode-02.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-download-mode-02.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Second screen of the download mode
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Connect the phone to the computer and make sure that it can detects the device by executing the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;lsusb
...
Bus 001 Device 022: ID 04e8:685d Samsung Electronics Co., Ltd GT-I9100 Phone [Galaxy S II] (Download mode)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, get the PIT information (Partition Information Table). The &lt;strong&gt;&lt;em&gt;--no-reboot&lt;/em&gt;&lt;/strong&gt; option tells the device not to reboot
after executing the command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;heimdall print-pit --no-reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="download the custom u-boot for the chipset"&gt;Download the custom u-boot for the chipset&lt;/h3&gt;
&lt;p&gt;After we verified the tool can communicate with the device, download one of the prebuilt u-boot binaries from the
following github repo: &lt;a href="https://github.com/stericsson-mainline/u-boot/releases"&gt;Releases &amp;middot; stericsson-mainline/u-boot &amp;middot; GitHub&lt;/a&gt;.
For this tutorial I downloaded the release version &lt;strong&gt;&lt;em&gt;U-Boot 2023.04 for ST-Ericsson NovaThor U8500&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="flashing the bootloader on the device"&gt;Flashing the bootloader on the device&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;WARNING: EXECUTING THE FOLLOWING STEP MAY BRICKED YOUR DEVICE.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The device wiki provides a table listing U-boot binary formats for different phone versions &lt;strong&gt;[1]&lt;/strong&gt;. For our specific phone
model, the required file is &lt;strong&gt;&lt;em&gt;u-boot.img&lt;/em&gt;&lt;/strong&gt;. In my case I rename it as &lt;strong&gt;&lt;em&gt;u-boot-2023-04.img&lt;/em&gt;&lt;/strong&gt;. To flash this file
onto your device, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;heimdall flash --Kernel u-boot-2023-04.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the output of the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;Heimdall v1.4.2

Copyright (c) 2010-2017 Benjamin Dobell, Glass Echidna
http://www.glassechidna.com.au/

This software is provided free of charge. Copying and redistribution is
encouraged.

If you appreciate this software and you would like to support future
development please consider donating:
http://www.glassechidna.com.au/donate/

Initialising connection...
Detecting device...
Claiming interface...
Setting up interface...

Initialising protocol...
Protocol initialisation successful.

Beginning session...

Some devices may take up to 2 minutes to respond.
Please be patient!

Session begun.

Downloading device's PIT file...
PIT file download successful.

Uploading Kernel
100%
Kernel upload successful

Ending session...
Rebooting device...
Releasing device interface...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the flashing process is complete, your device will reboot. However, since it doesn't have a kernel installed yet,
it will enter &lt;strong&gt;fastboot mode&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-fastboot-mode.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-fastboot-mode.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Fastboot mode after flashing u-boot
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="installing pmbootstrap and run configuration for samsung galaxy s3 mini"&gt;Installing &lt;em&gt;pmbootstrap&lt;/em&gt; and run configuration for Samsung Galaxy S3 Mini&lt;/h2&gt;
&lt;p&gt;To install &lt;strong&gt;&lt;em&gt;pmbootstrap&lt;/em&gt;&lt;/strong&gt; follow the installation steps described in the wiki &lt;strong&gt;[2]&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone --depth=1 https://gitlab.com/postmarketOS/pmbootstrap.git
mkdir -p ~/.local/bin
ln -s "$PWD/pmbootstrap/pmbootstrap.py" ~/.local/bin/pmbootstrap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case I had to edit the &lt;strong&gt;&lt;em&gt;.bashrc&lt;/em&gt;&lt;/strong&gt; file to append the directory we created in the previous step. This allows the
operating system to find the program.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# pmbootstrap
export PATH=$PATH:/home/ubuntu/.local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open a terminal and verifiy pmbootstrap is available on the system:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pmbootstrap --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="running the configuration tool for samsung galaxy s3 mini"&gt;Running the configuration tool for Samsung Galaxy S3 Mini&lt;/h3&gt;
&lt;p&gt;Before initializing the pmbootstrap configuration, it's important to create a dedicated directory to store the
device-specific configuration files. This is where you'll obtain the kernel and root filesystem for your smartphone.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir samsung-golden
pmbootstrap init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pmbootstrap program will prompt you with several configuration options. For this tutorial, we'll focus on installing
postmarketOS with just the console interface, although other options include a desktop environment. Here are the specific
settings I chose:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;Work path [/home/user/.local/var/pmbootstrap]: /home/user/samsung-golden
Channel [edge]: edge
Vendor [qemu]: samsung
Device codename: golden
Kernel [downstream]: mainline
Username [user]: tinkering_at_night
Provider [default]: default
User interface [console]: console
Change them? (y/n) [n]: n
Extra packages [none]: none
Use this timezone instead of GMT? (y/n) [y]: y
Locale [en_US]: en_US
Device hostname (short form, e.g. 'foo') [samsung-golden]: samsung-golden
Build outdated packages during 'pmbootstrap install'? (y/n) [n]: y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="flashing postmarketos kernel onto the smartphone"&gt;Flashing postmarketOS kernel onto the smartphone&lt;/h2&gt;
&lt;p&gt;Flash the kernel onto the device with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pmbootstrap flasher flash_kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the output of the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;[13:18:37] Update package index for x86_64 (4 file(s))
[13:18:45] Download http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/apk-tools-static-2.14.4-r0.apk
[13:18:47] (native) install alpine-base
[13:18:57] (native) install qemu-arm
[13:18:59] Register qemu binfmt (arm)
[13:18:59] (rootfs_samsung-golden) install alpine-base
[13:19:12] (rootfs_samsung-golden) install device-samsung-golden device-samsung-golden-kernel-mainline
[13:20:40] (rootfs_samsung-golden) install postmarketos-mkinitfs
[13:20:43] (rootfs_samsung-golden) mkinitfs postmarketos-stericsson
[13:20:53] (native) flash kernel postmarketos-stericsson
[13:20:53] (native) install android-tools
Sending 'boot' (7534 KB)                           OKAY [  0.949s]
Writing 'boot'                                     OKAY [  1.206s]
Finished. Total time: 2.446s
[13:21:19] You will get an IP automatically assigned to your USB interface shortly.
[13:21:19] Then you can connect to your device using ssh after pmOS has booted:
[13:21:19] ssh tinkering_at_night@172.16.42.1
[13:21:19] NOTE: If you enabled full disk encryption, you should make sure that Unl0kr has been properly configured for your device
[13:21:19] NOTE: chroot is still active (use 'pmbootstrap shutdown' as necessary)
[13:21:19] DONE!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-flashing-kernel.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-flashing-kernel.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Output of the flashing process
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Once the flashing process is complete, press the &lt;strong&gt;&lt;em&gt;Power button&lt;/em&gt;&lt;/strong&gt; to reboot the smartphone. After the reboot the logo
is displayed on the screen.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-pmos-logo.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-pmos-logo.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            postmarketOS logo
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Since currently there is not a rootfs, the kernel shows the following error message:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-error-rootfs.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-error-rootfs.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            The OS doesn't found the root file system
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id="how to re-flash kernel"&gt;How to re-flash kernel&lt;/h3&gt;
&lt;p&gt;In case you want to re-flash the kernel you have to reboot the smartphone and press the buttons &lt;strong&gt;Power&lt;/strong&gt; +
&lt;strong&gt;Volume Down&lt;/strong&gt; + &lt;strong&gt;Home&lt;/strong&gt; to enter in &lt;strong&gt;fastboot mode&lt;/strong&gt;. Then execute the step to flash the kernel again.&lt;/p&gt;
&lt;h2 id="install rootfs on sd card"&gt;Install rootfs on SD card&lt;/h2&gt;
&lt;p&gt;We need a SD card formated as &lt;strong&gt;ext4&lt;/strong&gt; to copy into it the rootfs. You can run the following command to format the SD
card with that required format partition:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo mkfs -t ext4 /dev/sd&lt;x&gt;
sudo mkfs -t ext4 /dev/sdd # For example
&lt;/x&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the output of the command. It will ask you for a password:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;[10:45:04] *** (1/4) PREPARE NATIVE CHROOT ***
[10:45:06] (native) install cryptsetup util-linux parted
[10:45:16] *** (2/4) CREATE DEVICE ROOTFS ("samsung-golden") ***
[10:45:16] Register qemu binfmt (arm)
[10:45:18] Update package index for armv7 (4 file(s))
[10:45:25] Update package index for x86_64 (4 file(s))
[10:45:29] (rootfs_samsung-golden) install postmarketos-base device-samsung-golden postmarketos-ui-console device-samsung-golden-kernel-mainline device-samsung-golden-nonfree-firmware postmarketos-base-nofde font-twemoji
[10:46:50] (rootfs_samsung-golden) install device-samsung-golden device-samsung-golden-kernel-mainline
[10:46:55] (rootfs_samsung-golden) install postmarketos-mkinitfs
[10:46:58] (rootfs_samsung-golden) mkinitfs postmarketos-stericsson
[10:47:05]  *** SET LOGIN PASSWORD FOR: 'tinkering_at_night' ***
New password: 
              Retype new password: 
                                   passwd: password updated successfully
                                                                        [10:47:33] NOTE: No valid keymap specified for device
[10:47:36] *** (3/4) PREPARE INSTALL BLOCKDEVICE ***
[10:47:37] (native) mount /dev/install (host: /dev/sdd)
[10:47:37] EVERYTHING ON /dev/sdd WILL BE ERASED! CONTINUE? (y/n) [n]: y
[10:48:00] (native) partition /dev/install (boot: 256M, reserved: 0M, root: the rest)
[10:48:00] (native) install e2fsprogs
[10:48:03] (native) format /dev/installp2 (root, ext4)
[10:48:29] (native) mount /dev/installp2 to /mnt/install
[10:48:29] (native) install e2fsprogs
[10:48:30] (native) format /dev/installp1 (boot, ext2), mount to /mnt/install/boot
[10:48:39] (native) create /etc/fstab
[10:48:40] (rootfs_samsung-golden) mkinitfs
[10:48:49] *** (4/4) FILL INSTALL BLOCKDEVICE ***
[10:48:49] (native) copy rootfs_samsung-golden to /mnt/install/
[10:48:51] Unmounting disk /dev/sdd (this may take a while to sync, please wait)
[10:50:38] 
[10:50:38] *** FLASHING INFORMATION ***
[10:50:38] Run the following to flash your installation to the target device:
[10:50:38] * pmbootstrap flasher flash_kernel
[10:50:38]   Flashes the kernel + initramfs to your device:
[10:50:38]   /home/ubuntu/postmarketos/samsung-golden/chroot_rootfs_samsung-golden/boot
[10:50:38]   (NOTE: fastboot also supports booting the kernel/initramfs directly without flashing. Use 'pmbootstrap flasher boot' to do that.)
[10:50:38] * If the above steps do not work, you can also create symlinks to the generated files with 'pmbootstrap export' and flash outside of pmbootstrap.
[10:50:38] 
[10:50:38] *** SSH DAEMON INFORMATION ***
[10:50:38] SSH daemon is enabled (disable with --no-sshd).
[10:50:38] Login as 'tinkering_at_night' with the password given during installation.
[10:50:38] 
[10:50:38] *** FIREWALL INFORMATION ***
[10:50:38] Firewall is enabled, but will not work (no support in kernel config for nftables).
[10:50:38] If/when the kernel supports it in the future, it will work automatically.
[10:50:38] For more information: https://postmarketos.org/firewall
[10:50:38] 
[10:50:38] NOTE: chroot is still active (use 'pmbootstrap shutdown' as necessary)
[10:50:38] DONE!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Insert the SD card in the SD card slot of the smartphone. After the kernel boots, the system mounts the root file system.
You should see the following prompt:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/pmos-samsung-s3-mini.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/pmos-samsung-s3-mini.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            postmarket OS prompt
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="get serial console from the phone"&gt;Get serial console from the phone&lt;/h2&gt;
&lt;p&gt;While we'll eventually need the console for further configuration, accessing it requires a serial cable connected to
your phone. The phone utilizes the &lt;strong&gt;AB8500&lt;/strong&gt; Micro-USB Interface Controller, which allows serial communication when a
resitor is placed between ID pin and GND &lt;strong&gt;[3]&lt;/strong&gt;. Here's how to build a simple circuit to enable UART and grant access
through the smartphone's micro USB port:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/samsung-usb-serial.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/samsung-usb-serial.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Circuit to enable UART transmission on the USB connector
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Connecting the serial cable to the computer should display a prompt like the one shown below:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/serial-terminal-postmarketos.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/serial-terminal-postmarketos.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            postmarketOS prompt
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; The Micro-USB interface operates at 3.3 volts. This means you might need a voltage level converter
to connect a standard UART interface, which typically operates at 5 volts, to your phone's micro-USB port.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/pmos-samsung-s3-mini/s3-mini-serial-cable.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/pmos-samsung-s3-mini/s3-mini-serial-cable.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Here is the cable I built to access UART. I used a voltage level converter since the USB-serial module operates at 5 volts
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="next steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;My plan for these devices is to install eclipse-mosquitto to run a MQTT broker. I also intend to run LVGL on them. I
hope this tutorial inspires you to try installing postmarketOS on your own smartphones. In the next post, I'll guide you
through setting up WiFi on the device and connecting to it via SSH.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;video autoplay="" height="auto" loop="" muted="" width="360"&gt;
&lt;source src="article-assets/pmos-samsung-s3-mini/s3-mini-pmos-booting-video.mp4" type="video/mp4"/&gt;
      Your browser does not support the video tag.
    &lt;/video&gt;
&lt;/div&gt;
&lt;h2 id="references:"&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://wiki.postmarketos.org/wiki/ST-Ericsson_NovaThor_U8500#U-Boot_on_Samsung_NovaThor_U8500_Devices"&gt;ST-Ericsson NovaThor U8500 - U-boot - postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://wiki.postmarketos.org/wiki/Pmbootstrap#From_git"&gt;Installation - From git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="https://wiki.postmarketos.org/wiki/Micro-USB_Interface_Controller"&gt;Micro-USB Interface Controller - postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.postmarketos.org/wiki/ST-Ericsson_NovaThor_U8500"&gt;ST-Ericsson_NovaThor_U8500 - postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.postmarketos.org/wiki/Pmbootstrap#SD_card"&gt;Pmbootstrap - SD card - postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates and fixes:"&gt;Updates and fixes:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;02/05/2025:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add screenshot of terminal prompt.&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category></entry><entry><title>Using MPRIS D-Bus to access track metadata</title><link href="/track-info-mpris.html" rel="alternate"></link><published>2024-06-22T00:00:00-06:00</published><updated>2024-06-22T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2024-06-22:/track-info-mpris.html</id><summary type="html">&lt;p&gt;This post will explore the functionalities of the MPRIS D-Bus. We will examine its application in retrieving information about the currently playing track on specific media players, such as Spotify. This post will also explore some practical applications by presenting a few relevant projects built with this communication system.&lt;/p&gt;</summary><content type="html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A while back, I came across a cool project called &lt;a href="https://github.com/NyaomiDEV/Sunamu"&gt;Sunamu&lt;/a&gt;. As their website says,
&lt;strong&gt;&lt;em&gt;"It's a fancy music controller"&lt;/em&gt;&lt;/strong&gt;. This means you can use it to control other media players like Spotify and VLC.
Just keep in mind that Sunamu currently only works on Linux systems.&lt;/p&gt;
&lt;p&gt;I became curious about how Sunamu controlled players like Spotify. After digging into the code, I discovered it used
MPRIS D-Bus. Curious to learn more, I continued researching MPRIS D-Bus. Thanks to the information provided by D-Bus, I
was able to develop some useful examples and projects.&lt;/p&gt;
&lt;h2 id="mpris d-bus"&gt;MPRIS D-bus&lt;/h2&gt;
&lt;p&gt;According to the documentation, the MPRIS bus [1] is a standard &lt;strong&gt;&lt;em&gt;D-bus&lt;/em&gt;&lt;/strong&gt; [2] that provides an API for controlling media
players like Spotify and VLC. It also allows you to retrieve information about each item in the player's tracklist.&lt;/p&gt;
&lt;p&gt;Each media player registers a unique name on the D-Bus that starts with &lt;strong&gt;&lt;em&gt;org.mpris.MediaPlayer2&lt;/em&gt;&lt;/strong&gt;. For instance, the
Spotify desktop application uses the name &lt;strong&gt;&lt;em&gt;org.mpris.MediaPlayer2.spotify&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Media players use signals to notify clients, like the Sunamu desktop application, about changes in their state (playing,
paused, stopped, etc.). This allows other applications to constantly monitor and receive these signals.&lt;/p&gt;
&lt;p&gt;One major advantage of MPRIS D-Bus is that it publishes metadata about the currently playing track. This metadata includes
information like artist, title, album, etc. We can parse this information, which will be useful for the projects I'll
describe later.&lt;/p&gt;
&lt;h2 id="project examples"&gt;Project examples&lt;/h2&gt;
&lt;p&gt;The following projects demonstrate how to receive metadata about the current track playing on Spotify. However, it's
important to note that these projects are currently only functional on Linux systems.&lt;/p&gt;
&lt;h3 id="python scripts"&gt;Python scripts&lt;/h3&gt;
&lt;p&gt;I've developed some Python examples to demonstrate MPRIS functionality. You can find them on GitHub in the
&lt;a href="https://github.com/falb18/mpris-example"&gt;mpris-example&lt;/a&gt; repository. These programs monitor the metadata of the current
track playing on Spotify by utilizing the &lt;a href="https://github.com/hugosenari/mpris2"&gt;mpris2&lt;/a&gt; Python library to interact with
the MPRIS D-Bus.&lt;/p&gt;
&lt;h3 id="spotify track info on led matrix display"&gt;Spotify track info on LED matrix display&lt;/h3&gt;
&lt;p&gt;After building some Python programs to retrieve track information, I got the idea to display this data on a physical
interface. Currently, I'm using an LED matrix, but the next step is to try this out on different screens, like those
character LCDs and TFT displays. Ultimately, my goal is to create a system that not only displays track information but
also controls Spotify playback through an external device.&lt;/p&gt;
&lt;p&gt;This project aims to create a system that displays track information on an external device. A Python script retrieves
the current track's metadata and publishes it to an MQTT broker (in my case, a docker container). A separate device, a
&lt;strong&gt;WeMos D1 Mini Pro&lt;/strong&gt;, subscribes to this information and displays it on an LED matrix display. The following diagram
illustrates the interaction between these two devices:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/track-info-mpris/spotify-track-info-led-matrix-diagram.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/track-info-mpris/spotify-track-info-led-matrix-diagram.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            MQTT network diagram
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;To get started, download and run the Python program &lt;a href="https://github.com/falb18/spotify-mqtt-publisher"&gt;spotify-mqtt-publisher&lt;/a&gt;.
This program will publish the track's metadata to the MQTT broker. Next, download the firmware &lt;a href="https://github.com/falb18/led-matrix-spotify-track-info"&gt;led-matrix-track-info&lt;/a&gt;
and flash it onto your WeMos D1 mini. This firmware will allow the device to subscribe to the relevant topics and display
the track information on the LED matrix display.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;video autoplay="" height="auto" loop="" muted="" width="512"&gt;
&lt;source src="article-assets/track-info-mpris/led-matrix-spotify-track-video.mp4" type="video/mp4"/&gt;
      Your browser does not support the video tag.
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;So, with all this info, you're ready to play around with the MPRIS D-Bus and make your own cool projects!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://specifications.freedesktop.org/mpris-spec/latest/"&gt;MPRIS D-Bus Interface Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://www.freedesktop.org/wiki/Software/dbus/"&gt;D-bus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category></entry><entry><title>Setup docker container eclipse-mosquitto to use ipvlan and access it from other devices</title><link href="/eclipse-mosquitto-ipvlan.html" rel="alternate"></link><published>2024-04-10T00:00:00-06:00</published><updated>2024-04-10T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2024-04-10:/eclipse-mosquitto-ipvlan.html</id><summary type="html">&lt;p&gt;This is a quick tutorial on how to setup the eclipse-mosquitto container to use the ipvlan driver so we can access it from other devices.&lt;/p&gt;</summary><content type="html">&lt;p&gt;While working on an MQTT data transmission project, I set up an eclipse-mosquitto docker container as a broker on my
laptop. However, with this configuration I could not connect to the broker from other devices since the container's
network is separated from my local network. Luckily, after some web searching, I found a blog post that sets a
configuration that integrates the container into the same local network. This will allow to connect to that broker from
other devices like an ESP32.&lt;/p&gt;
&lt;p&gt;Taking inspiration from the blog post at &lt;a href="https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/"&gt;Using Docker macvlan networks :: blog.oddbit.com&lt;/a&gt;,
I'll describe the steps to create an eclipse-mosquitto container that connects to your local network. I highly recommend
reading the original post first.&lt;/p&gt;
&lt;h2 id="create an ipvlan docker network"&gt;Create an ipvlan docker network&lt;/h2&gt;
&lt;p&gt;According to the documentation of the driver and docker [1][2], one advantage is that it connects directly to the host
interface. This allows us to set an IP address on the same network shared by the host machine and the router. The
configuration we want to achive is show in the following diagram.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/eclipse-mosquitto-ipvlan/network-diagram.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/eclipse-mosquitto-ipvlan/network-diagram.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Network diagram
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;In my case I assgined to the container the address &lt;strong&gt;&lt;em&gt;192.168.2.111&lt;/em&gt;&lt;/strong&gt; so its reachable from any device, even from the
host machine. Your router's IP address may be different so modify the IP address to match your local network.&lt;/p&gt;
&lt;p&gt;First, we have to create create a docker network. To do that run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker network create -d ipvlan -o parent=eno1 \
  --subnet 192.168.2.0/24 \
  --gateway 192.168.2.1 \
  --ip-range 192.168.2.110/28 \
  --aux-address 'host=192.168.2.110' \
  ipvlan1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we are doing is to reserve 15 ip addresses, from &lt;strong&gt;&lt;em&gt;192.168.2.110&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;192.168.2.114&lt;/em&gt;&lt;/strong&gt; and reserve the address
&lt;strong&gt;&lt;em&gt;192.168.2.110&lt;/em&gt;&lt;/strong&gt; for use by the host interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; You must check your router can assign the IP addresses you defined in the docker network configuration
becuase if that's not possible then you will not be able to connect to the container.&lt;/p&gt;
&lt;h2 id="setup a bridge between the host machine and the container"&gt;Setup a bridge between the host machine and the container&lt;/h2&gt;
&lt;p&gt;The ipvlan driver isolates the container's network; therefore we cannot ping to any container that uses the network we
just created from the host machine. To address this limitation we need to create a bridge between the host machine (in
my case, my laptop) and the eclipse-mosquitto container.&lt;/p&gt;
&lt;p&gt;Run the following commands to create and configure the bridge:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo ip link add ipvlan1 link eno1 type ipvlan # Default mode bridge l3
sudo ip addr add 192.168.2.110/32 dev ipvlan1 # Assign the IP address we reserved from the docker network
sudo ip link set ipvlan1 up
sudo ip route add 192.168.2.0/24 dev ipvlan1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="confirm that the bridge was created"&gt;Confirm that the bridge was created&lt;/h3&gt;
&lt;p&gt;Execute the following commands to confirm that the bridge was created and that we have added the route to our docker
network:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;ip addr show ipvlan1
5: ipvlan1@eno1: &lt;broadcast,multicast,up,lower_up&gt; mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
    link/ether ac:e2:d3:7b:d6:35 brd ff:ff:ff:ff:ff:ff
    inet 192.168.2.110/32 scope global ipvlan1
       valid_lft forever preferred_lft forever
    inet6 fe80::ace2:d300:17b:d635/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/broadcast,multicast,up,lower_up&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;ip route
default via 192.168.2.1 dev eno1 proto dhcp src 192.168.2.191 metric 100 
169.254.0.0/16 dev eno1 scope link metric 1000 
172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 
192.168.2.0/24 dev ipvlan1 scope link 
192.168.2.0/24 dev eno1 proto kernel scope link src 192.168.2.191 metric 100
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="start the eclipse-mosquitto container with the new network"&gt;Start the eclipse-mosquitto container with the new network&lt;/h2&gt;
&lt;p&gt;Finally, create a new &lt;strong&gt;&lt;em&gt;docker-compose.yml&lt;/em&gt;&lt;/strong&gt; file with the following configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;version: "3"
services:
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    networks:
      external-net:
        ipv4_address: 192.168.2.111
    volumes:
      - /home/ubuntu/mqtt/mosquitto/config:/mosquitto/config
      - /home/ubuntu/mqtt/mosquitto/data:/mosquitto/data
      - /home/ubuntu/mqtt/mosquitto/log:/mosquitto/log
    restart: unless-stopped

networks:
  external-net:
    name: ipvlan1
    external: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and on the same directory execute the following command to create the container:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="test the eclipse-mosquitto container"&gt;Test the eclipse-mosquitto container&lt;/h2&gt;
&lt;p&gt;First, try to ping the container to verify you can reach the broker:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;ping -c4 192.168.2.111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test the broker I downloaded the following MQTT client: &lt;a href="https://github.com/nscooling/MQTT-c-pub-sub"&gt;MQTT-c-pub-sub&lt;/a&gt;.
To compile the project you need cmake installed on your computer.&lt;/p&gt;
&lt;p&gt;Open a terminal and run the following command to see the log of the eclipse-mosquitto broker:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker exec -it mosquitto tail -f /mosquitto/log/mosquitto.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a different terminal run the MQTT client to publish the messages. The default topic is hello/world:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;./mqttpub -i 192.168.2.111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the mosquitto's log you should see something similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;2024-03-30T19:18:33: New connection from 192.168.2.110:37114 on port 1883.
2024-03-30T19:18:33: New client connected from 192.168.2.110:37114 as default_pub (p1, c1, k30).
2024-03-30T19:18:43: Client default_pub disconnected.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://docs.kernel.org/networking/ipvlan.html"&gt;https://docs.kernel.org/networking/ipvlan.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://docs.docker.com/network/drivers/ipvlan/"&gt;https://docs.docker.com/network/drivers/ipvlan/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category></entry><entry><title>Configure ESP8266 RTOS SDK to use ESP-IDF framework</title><link href="/esp8266-rtos-sdk-vscode.html" rel="alternate"></link><published>2023-06-24T00:00:00-06:00</published><updated>2023-06-24T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2023-06-24:/esp8266-rtos-sdk-vscode.html</id><summary type="html">&lt;p&gt;The purpose of this tutorial is to explain how to configure ESP8266 RTOS SDK to use the ESP-IDF framework. Also, this is a an explanation on how to install the toolchain and the latest version of esptool.py.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I will explain how to configure ESP8266 SDK to use the ESP-IDF framework, along with the extension that
is available for VSCode. The SDK documentation indicates that the extension is intended to be used with the framework,
and the setup files are included in the SDK's repository. However, I could not find any tutorials that explain how to
configure this.&lt;/p&gt;
&lt;h2 id="install the esp-idf extension"&gt;Install the ESP-IDF extension&lt;/h2&gt;
&lt;p&gt;Before proceeding with the next steps, it is important to have already installed the framework in VSCode. You can find
the installation instructions in the tool's &lt;a href="https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/tutorial/install.md"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my case, I create and installed the framework in the following directory: &lt;strong&gt;&lt;em&gt;~/esp&lt;/em&gt;&lt;/strong&gt;. I also chose to install the
tools in this directory: &lt;strong&gt;&lt;em&gt;~/esp/.espressif&lt;/em&gt;&lt;/strong&gt;. Therefore, the toolchain and the SDK will be installed in the same
directory.&lt;/p&gt;
&lt;h2 id="download the esp8266 rtos sdk"&gt;Download the ESP8266 RTOS SDK&lt;/h2&gt;
&lt;p&gt;Clone the repository for the SDK:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ~/esp
git clone -b master --recursive https://github.com/espressif/ESP8266_RTOS_SDK.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not forget to write the option &lt;em&gt;--recursive&lt;/em&gt; since git will also download the submodules the repository has.&lt;/p&gt;
&lt;h2 id="install the toolchain"&gt;Install the toolchain&lt;/h2&gt;
&lt;p&gt;The ESP-IDF doesn't include the toolchain for the ESP8266, so we have to download it from the ESP's server:
&lt;a href="https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz"&gt;xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64&lt;/a&gt;.
Extract the toolchain inside the esp-idf tool's directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ~/esp.espressif/tools
tar -xzf ~/Downloads/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="configure vscode extension"&gt;Configure VSCode extension&lt;/h2&gt;
&lt;p&gt;We need to configure the extension. This involves setting the appropiate variables and specifying the location of the
toolchain. Copy the &lt;em&gt;cmake&lt;/em&gt; file for the toolchain inside the tool's directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cp ~/esp/ESP8266_RTOS_SDK/tools/cmake/toolchain-esp8266.cmake ~/esp/esp-idf/tools/cmake/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to append the toolchain's path in the ESP-IDF extension settings. In VSCode, open the extension's settings and
search for: &lt;strong&gt;&lt;em&gt;Idf: Custom Extra Paths&lt;/em&gt;&lt;/strong&gt;. Append to it the ESP8266's toolchain path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;/home/ubuntu/esp/.espressif/tools/xtensa-lx106-elf/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/esp8266-sdk-vscode/esp-idf-setting-custom-path.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/esp8266-sdk-vscode/esp-idf-setting-custom-path.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            ESP-IDF setting to add extra paths.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id="configuration for esp8266's project"&gt;Configuration for ESP8266's project&lt;/h3&gt;
&lt;p&gt;Each time you create a new project that is going to use the ESP-IDF framework and the ESP8266 SDK, you will have to
create or edit the file &lt;strong&gt;&lt;em&gt;settings.json&lt;/em&gt;&lt;/strong&gt;, which is inside the directory &lt;em&gt;.vscode/&lt;/em&gt;. This file must include the
following configuration: the SDK's path, the custom microcontroller's cmake file that is going to be parsed, and the
flash setup that is going to be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "cmake.configureOnOpen": false,
    "idf.espIdfPath": "/home/ubuntu/esp/ESP8266_RTOS_SDK",
    "idf.adapterTargetName": "esp8266",
    "idf.flashType": "UART",
    "idf.port": "/dev/CH341",
    "idf.flashBaudRate": "115200"
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to set the setting &lt;em&gt;"cmake.configureOnOpen": false&lt;/em&gt; to prevent vscode do an automatic configuration.
With this change we can let the extension do the proper configuration for cmake.&lt;/p&gt;
&lt;p&gt;In addtion, you will have to edit or create the file &lt;strong&gt;&lt;em&gt;c_cpp_properties.json&lt;/em&gt;&lt;/strong&gt; in order to set the compiling options,
like the include path or the compiler's path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "configurations": [
        {
            "name": "Xtensa",
            "includePath": [
                "${workspaceFolder}/**",
                "${env:IDF_PATH}/components/**",
                "${env:IDF_PATH}/components/freertos/port/esp8266/include"
            ],
            "defines": [],
            "compilerPath": "${env.HOME}/esp/.espressif/tools/xtensa-lx106-elf/bin/xtensa-lx106-elf-gcc",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "gcc-x64",
            "compileCommands": "${workspaceFolder}/build/compile_commands.json",
            "configurationProvider": "vector-of-bool.cmake-tools"
        }
    ],
    "version": 4
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="install latest version of esptool.py"&gt;Install latest version of esptool.py&lt;/h2&gt;
&lt;p&gt;The ESP-IDF framework comes with an old version of &lt;strong&gt;&lt;em&gt;esptool.py&lt;/em&gt;&lt;/strong&gt;. Hence, I decided to install the laterst version of
the tool, at the time of writing this article the latest version is v4.6.2. Download it from the
&lt;a href="https://github.com/espressif/esptool/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Rename the current esptool directory, in each setup, to have a backup of the original version:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ~/esp/esp-idf/components/esptool_py/
mv esptool esptool_orig
cd ~/esp/ESP8266_RTOS_SDK/components/esptool_py/
mv esptool esptool_orig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, copy the new version's directory inside both directories:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cp -r esptool-4.6.2 ~/esp/esp-idf/components/esptool_py/esptool
cp -r esptool-4.6.2 ~/esp/ESP8266_RTOS_SDK/components/esptool_py/esptool
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="evidence that everything works as expected"&gt;Evidence that everything works as expected&lt;/h2&gt;
&lt;p&gt;Here are some screenshots of ESP8266 RTOS SDK working with the ESP-IDF extension:&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/esp8266-sdk-vscode/esp-idf-build.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/esp8266-sdk-vscode/esp-idf-build.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Now it's possible to build the project with the ESP-IDF extension.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/esp8266-sdk-vscode/esp-idf-flash.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/esp8266-sdk-vscode/esp-idf-flash.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Also you can flash the MCU.
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Hope you find this tutorial useful.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Moving to Monterrey</title><link href="/moving-to-mty.html" rel="alternate"></link><published>2023-04-10T00:00:00-06:00</published><updated>2023-04-10T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2023-04-10:/moving-to-mty.html</id><summary type="html">&lt;p&gt;I haven't post in almost two years due to I moved to a new city. This city is Monterrey, which is located at the north of Mexico. This is going to be a brief post of my new experience in this city.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't post in almost two years because I moved to a new city. The city is Monterrey, which is located at the north
of Mexico. This is going to be a brief post about my new experience in this city.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/moving-to-mty/cerro-silla.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/moving-to-mty/cerro-silla.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Cerro de la silla mountain
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="the reason i moved to a new city"&gt;The reason I moved to a new city&lt;/h2&gt;
&lt;p&gt;I moved to Monterrey in July 2021 because I got a new job offer as an embedded software developer for the automotive
industry. The pandemic was still going on so I doubt a little bit at the beginning, but then I came aware
that this was a huge opportunity for me since I'll be software developer, and I will be working with new methodologies
and tools. But most important that I'll put in practice my coding skills in C, which later I realized that I still have
a lot to learn about programming, since it had been a long time that I haven't implemented code for big projects.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/moving-to-mty/fundidora.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/moving-to-mty/fundidora.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center" style="display: table-caption; caption-side: bottom;"&gt;
            Fundidora Park
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="a new beginning for me"&gt;A new beginning for me&lt;/h2&gt;
&lt;p&gt;I came here when I was close to turn 28 years old. It has been a complete different experience because it is the first
time that I'm living on my own and with that have came certain challanges. Now, the downside has been the weather
conditions of the city since during spring, summer and autumn it is very hot. Even last year the whole state
experienced a sever drought, which make it hard to deal with when doing the daily activities. Although I haven't like
it here that much, still I'm glad that I'm having this opportunity and that the company where I worked for has grown,
and even I've been promoted. So there have been possitive and negative aspects in this new journey.&lt;/p&gt;
&lt;h2 id="upcoming projects"&gt;Upcoming projects&lt;/h2&gt;
&lt;p&gt;Although I have worked in some projects during my free time, for various reasons I didn't have the chance to post them
here. Now that I have everything settle down, I'll start posting updates more frequently on projects that currently I'm
working on, or that I had done.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>MQTT simple application</title><link href="/mqtt-simple-application.html" rel="alternate"></link><published>2021-07-09T00:00:00-05:00</published><updated>2021-07-09T00:00:00-05:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2021-07-09:/mqtt-simple-application.html</id><summary type="html">&lt;p&gt;This example demonstrates how to setup and use MQTT protocol to publish and read messages using two Arduinos. The purpose of this project is to do a simple applicaton where one client gets information of a sensor and sends it through WiFi. Another client reads those messages and displays them on an 16x02 LCD.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This example demonstrates how to setup and use MQTT protocol to publish and readd messages using two Arduinos.
The purpose of this project is to do a simple application where one Arduino gets information of a sensor and then sends 
the message through WiFi. Then another Arduino reads those messages and displays the information on an 16x02 LCD.&lt;/p&gt;
&lt;p&gt;This basic project serves for me as an introduction to know how to setup the broker, which will be running on a 
Raspberry Pi; to setup the clients which each one has an &lt;em&gt;ESP8266&lt;/em&gt; attached to them, and finally how to send messages 
between the clients.&lt;/p&gt;
&lt;p&gt;There's a useful tutorial about the MQTT protocol from 
&lt;a href="https://www.hivemq.com/blog/how-to-get-started-with-mqtt/"&gt;HiveMQ&lt;/a&gt;. Read it first if you don't know anything about 
this protocol, like I did myself.&lt;/p&gt;
&lt;p&gt;The tools and hardware for this project are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rasbperry Pi Model 2 with WiFi USB dongle(this is the broker and can be replaced with a recent model)&lt;/li&gt;
&lt;li&gt;Arduino Mega (can be replaced with another Arduino model)&lt;/li&gt;
&lt;li&gt;Arduino Nano (can be replaced with another Arduino model)&lt;/li&gt;
&lt;li&gt;Espresso Lite (can be replaced with another ESP module)&lt;/li&gt;
&lt;li&gt;ESP-01 module (can be replaced with another ESP module)&lt;/li&gt;
&lt;li&gt;Ultrasonic sensor&lt;/li&gt;
&lt;li&gt;LCD 16x02&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="an overview of the project"&gt;An overview of the project&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi acts as the broker which dispatches messages between the sender and the receiver.
Is very easy to setup the broker on a Raspberry Pi. For the setup follow the instructions from this
&lt;a href="https://www.hackster.io/dhairya-parikh/running-a-mqtt-broker-on-raspberry-pi-63c348"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the clients I'm using an Arduino Mega and an Arduino Nano. Both have attached an &lt;em&gt;ESP8266&lt;/em&gt; so they can connect to 
broker's network and publish or read MQTT messages. One client calculates the distance to an object, using an
ultrasonic sensor, and then it publishes the message in the topic "sensor/distance".&lt;/p&gt;
&lt;p&gt;The other client, which is suscribed to the topic above, reads the messages and display the distance on the LCD.&lt;/p&gt;
&lt;h2 id="builiding the circuit"&gt;Builiding the circuit&lt;/h2&gt;
&lt;p&gt;The schematic below shows how the peripherals for each client are connected. To supply voltage to the ultrasonic
sensor and &lt;em&gt;ESP-01&lt;/em&gt; module a breadboard power supply module is used. The LCD and the &lt;em&gt;Espresso Lite&lt;/em&gt; are connected to
the 5v of the Arduino Nano. The Raspberry Pi is not shown on the schematic since it's independent of the two clients.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/mqtt-simple-application/esp-mqtt-pub-sub.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/mqtt-simple-application/esp-mqtt-pub-sub.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Here is a picture of how everything is connected on the breadboard.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/mqtt-simple-application/esp-mqtt-circuit.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/mqtt-simple-application/esp-mqtt-circuit.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="updating the firmware in both esp modules"&gt;Updating the firmware in both ESP modules&lt;/h2&gt;
&lt;p&gt;I bought the &lt;em&gt;ESP-01&lt;/em&gt; module and the &lt;em&gt;Espresso Lite&lt;/em&gt; long time ago so the firmware intalled in them wasn't
a recent one.&lt;/p&gt;
&lt;p&gt;In the &lt;em&gt;Espresso Lite&lt;/em&gt; I installed Espressif's firmware v1.7.4 and on the &lt;em&gt;ESP-01&lt;/em&gt; I installed the v1.6.2.
To install the firmware I used the tool &lt;em&gt;esptool.py&lt;/em&gt; v3.1 which can be downloaded from this github
&lt;a href="https://github.com/espressif/esptool/releases/tag/v3.1"&gt;repo&lt;/a&gt;. Before flashing, download the two firmware versions
from the Espressif's &lt;a href="https://www.espressif.com/en/support/download/at"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To flash the firmware in the &lt;em&gt;Espresso Lite&lt;/em&gt; run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ESP8266_NonOS_AT_Bin_V1.7.4/ESP8266_NonOS_AT_Bin_V1.7.4/bin/at/1024+1024
./esptool.py --port /dev/ttyUSB0 write_flash --flash_freq 40m --flash_mode dio --flash_size 4MB 0x00000 ../../boot_v1.7.bin 0x01000 user1.2048.new.5.bin 0x1fc000 ../../esp_init_data_default_v08.bin 0xfe000 ../../blank.bin 0x1fe000 ../../blank.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the &lt;em&gt;ESP-01&lt;/em&gt; execute the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ESP8266_AT_Bin_V1.6.2_0/ESP8266_AT_Bin_V1.6.2/bin/at/512+512/
./esptool.py --port /dev/ttyUSB1 write_flash --flash_freq 40m --flash_mode dio --flash_size 512KB 0x00000 ../../boot_v1.7.bin 0x01000 user1.1024.new.2.bin 0x7c000 ../../esp_init_data_default_v08.bin 0x7e000 ../../blank.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="issue with firmware v1.6.2"&gt;Issue with firmware v1.6.2&lt;/h3&gt;
&lt;p&gt;Unfortunately this version comes with errors which translate into the module disconnecting from the network after
a minute or so. Although the solution will be to update the firmware to a recent version, the problem is that
the external flash memory has only 512 KB because is and old version of this module.&lt;/p&gt;
&lt;p&gt;Newer firmware versions require at least 1 MB of flash memory. Maybe later I'll buy a new version of this module or
change it for another one like the ESP32-NodeMCU. For the moment it works for my basic setup but, needless to say, I
will not use it for other projects.&lt;/p&gt;
&lt;h2 id="code for both clients"&gt;Code for both clients&lt;/h2&gt;
&lt;p&gt;Both clients need the following libraries to send or read MQTT messages through WiFi.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WiFiEsp - this library allows to the Arduino to communicate with the ESP module through AT commands.&lt;/li&gt;
&lt;li&gt;PubSubClient - this library allows the clients to connect to a broker and publish or subscribe to topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used the Arduino IDE to program both Arduinos. I installed these libraries with the "Library Manager".&lt;/p&gt;
&lt;h3 id="code for the publisher"&gt;Code for the publisher&lt;/h3&gt;
&lt;p&gt;In general the code works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, setup the &lt;em&gt;ESP-01&lt;/em&gt; module so it connects to the WiFi network.&lt;/li&gt;
&lt;li&gt;Then connect to the MQTT broker to publish message in the topic "sensor/distance".&lt;/li&gt;
&lt;li&gt;Inside a loop calculate the distance to an object every 5 secs by triggering the ultrasonic sensor.&lt;/li&gt;
&lt;li&gt;Finally, publish the distance as a message into the topic.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;#include "WiFiEsp.h"
#include "PubSubClient.h"

const int trig_pin = 2;
const int echo_pin = 3;

// WiFi credentials and variables
const char ssid[] = "SSID_NETWORK";
const char pswd[] = "PSWD_SSID";
int status = WL_IDLE_STATUS;

// MQTT variables
const char ip_broker[] = "192.168.1.252";
unsigned long last_send;

// Ultrasonic sensor variables
unsigned long duration;
unsigned int distance;

WiFiEspClient espClient;

PubSubClient client(espClient);

void setup() {
  // Init serial for debugging
  Serial.begin(115200);

  // Init serial for ESP module
  Serial1.begin(115200);

  // Init ESP module
  WiFi.init(&amp;Serial1);

  // Check if module is connected
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("Wifi module is not connected");
    // Do not continue
    while (true);
  }

  // Attemp to connect to WiFi network
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);

    // Connect to WPA/WPA2 network
    status = WiFi.begin(ssid, pswd);
  }

  // Attempt to connect to MQTT broker
  client.setServer(ip_broker, 1883);
  while (!client.connected()) {
    Serial.print("Attempting to connect to broker: ");
    Serial.println(ip_broker);

    if (client.connect("ESP8266Client")) {
      Serial.println("[DONE]");
    } else {
      Serial.print("[FAILED] [rc = ");
      Serial.print(client.state());
      Serial.println(" : retrying in 500ms]");
      delay(500);
    }
  }

  pinMode(trig_pin, OUTPUT);
  pinMode(echo_pin, INPUT);
}

void loop() {
  unsigned int distance;

  // Every 5 secs send a message with the distance
  // measured by the sensor
  if (millis() - last_send &gt; 5000) {
    Serial.println("Send Topic");

    distance = get_distance();
    String payload = String("Distance: " + String(distance));

    char attributes[100];
    payload.toCharArray(attributes, 100);
    client.publish("sensor/distance", attributes);
    Serial.println(attributes);

    last_send = millis();
  }

  client.loop();
}

unsigned int get_distance(void)
{
  digitalWrite(trig_pin, LOW);
  delayMicroseconds(2);
  // Send pulse
  digitalWrite(trig_pin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig_pin, LOW);

  // Get echo and measure time travel
  duration = pulseIn(echo_pin, HIGH);
  distance = (duration * 0.034 / 2);

  return distance;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="code for the subscriber"&gt;Code for the subscriber&lt;/h3&gt;
&lt;p&gt;For this client the code works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup the &lt;em&gt;Espresso Lite&lt;/em&gt; to connect it to the WiFi network.&lt;/li&gt;
&lt;li&gt;Connect it to the MQTT broker to read the messages in the topic "sensor/distance".&lt;/li&gt;
&lt;li&gt;Inside a loop wait for new messages from the topic and display them on the LCD.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;#include &lt;WiFiEspAT.h&gt;
#include &lt;PubSubClient.h&gt;
#include &lt;LiquidCrystal.h&gt;

// WiFi credentials and variables
const char ssid[] = "SSID_NETWORK";
const char pswd[] = "PSWD_SSID";
int status = WL_IDLE_STATUS;

// MQTT variables
const char ip_broker[] = "192.168.1.252";

// LCD pinout
const int rs = 12, en = 11;
const int d4 = 5, d5 = 4, d6 = 3, d7 = 2;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

WiFiClient espClient;

PubSubClient client(espClient);

void setup() {
  lcd.begin(16, 2);

  // Init serial for ESP module
  Serial.begin(115200);

  // Init ESP module
  WiFi.init(Serial);

  if (WiFi.status() == WL_NO_MODULE) {
    lcd.setCursor(0,0);
    lcd.print("No WiFi module");
    // Don't continue
    while(true);
  }

  WiFi.disconnect();
  WiFi.endAP();
  
  while (status != WL_CONNECTED) {
    status = WiFi.begin(ssid, pswd);
  }

  lcd.clear();
  lcd.print("WiFi connected");

  // Attempt to connect to MQTT broker
  client.setServer(ip_broker, 1883);
  client.setCallback(sub_callback);
  while (!client.connected()) {

    if (client.connect("ESP8266-Wroom2")) {
      client.subscribe("sensor/distance");
    } else {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("No broker");
      lcd.setCursor(0,1);
      lcd.print("Retrying...");
      delay(500);
    }
  }

  lcd.clear();
  lcd.print("Broker found");
}

void loop() {
  client.loop();
}

void sub_callback(char *topic, byte *payload, unsigned int msg_length) {
  lcd.clear();
  lcd.setCursor(0,0);

  for (uint8_t i = 0; i &lt; msg_length; i++) { 
    lcd.print((char)payload[i]);
  }
  
  #if defined ARDUINO_MEGA2560
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");

  for (uint8_t i = 0; i &lt; msg_length; i++) {
    Serial.print((char)payload[i]);
  }

  Serial.println();
  #endif
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="publishing and reading messages"&gt;Publishing and reading messages&lt;/h2&gt;
&lt;p&gt;Here is a picture showing the LCD displaying the distance read from the topic. As I said before, due to the fault on
the firmware in the &lt;em&gt;ESP-01&lt;/em&gt; the project works only for a few minutes.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/mqtt-simple-application/esp-mqtt-project.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/mqtt-simple-application/esp-mqtt-project.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;If you buy a ESP-01S module it comes with a 1 MB of flash memory which is the minimum required for the v1.7.2 to work
on it, so the code will run without any issue.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://karibe.co.ke/2018/10/how-to-flash-the-latest-firmware-into-the-esp8266-board-in-linux-using-esptools/"&gt;How to Flash the Latest Firmware into the ESP8266 Board in Linux Using Esptools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://robertoostenveld.nl/esp8266-at-firmware/"&gt;Restoring the AT firmware on the ESP8266&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://randomnerdtutorials.com/esp32-mqtt-publish-subscribe-arduino-ide/"&gt;ESP32 MQTT &amp;ndash; Publish and Subscribe with Arduino IDE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category></entry><entry><title>Test HC-05 bluetooth module using linux commands</title><link href="/bluetooth-hc05-linux.html" rel="alternate"></link><published>2021-04-14T00:00:00-05:00</published><updated>2021-04-14T00:00:00-05:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2021-04-14:/bluetooth-hc05-linux.html</id><summary type="html">&lt;p&gt;The purpose of this post is to figure out how to connect a Linux PC to the HC-05 bluetooth module and send text to it through linux commands.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The purpose of this post is to figure out how to connect a Linux PC to the HC-05 bluetooth module and send text to it through linux commands.&lt;/p&gt;
&lt;p&gt;Here's the setup I have for this test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 18.04 installed in my laptop.&lt;/li&gt;
&lt;li&gt;HC-05 bluetooth module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="my diy base board"&gt;My DIY base board&lt;/h2&gt;
&lt;p&gt;I bought this module without the base board long time ago because I wanted to take advantage of all the GPIOs it has. When I did the purchase I was still studying at the university. I had this crazy idea of designing and building my own custom base board for the module. I used KiCad to draw the pcb for the base board. It has all the holes for the pin headers and each of them connected to a GPIO on the module.&lt;/p&gt;
&lt;p&gt;I made the pcb the old fashion way which is printing the circuit in a piece of paper using a laser printer and then transfer the toner to the copper board using an iron. I failed at least 5 times but at the end I got something decent, at least all the tracks where in place.&lt;/p&gt;
&lt;p&gt;Below is a picture of the moment where I was soldering the module to the base board. This step of the process wasn't that difficult as I thought it would be. To my surprise it worked the first time, at that moment I connected it to an Arduino Uno.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/diy-base-board.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/diy-base-board.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="building the circuit"&gt;Building the circuit&lt;/h2&gt;
&lt;p&gt;The first step is to check if the module can receive AT commands from the computer.&lt;/p&gt;
&lt;p&gt;For my particular case, I had to add a logic level converter since each GPIO on the module only works at 3.3v. I bought a bunch of this cheap modules in Aliexpress, but to be honest the quality leaves much to be desired, so I guess I'll get a new ones from Sparkfun.&lt;/p&gt;
&lt;p&gt;The schematic below shows how everything is connected.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/bluetooth-module-sch.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/bluetooth-module-sch.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;You can see the cheap logic level converter module and my DIY base board for the bluetooth. Although the schematic shows a 1-pole dip switch, I'm using a 4-pole dip switch because is the only spare I have at the moment.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/bluetooth-breadboard.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/bluetooth-breadboard.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="communicate to the module through uart"&gt;Communicate to the module through UART&lt;/h2&gt;
&lt;p&gt;I used &lt;em&gt;picocom&lt;/em&gt;, which is a terminal emulator, to open the serial port. To install it just run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;sudo apt install picocom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The module has two operation modes: &lt;strong&gt;&lt;em&gt;Automatic connection&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Order-Response&lt;/em&gt;&lt;/strong&gt;. The former only receives a small subset of AT comamnds and the latter is used to send and receive AT commands. To set the latter mode in the module the PIO_11 (GPIO 34) has to be in high level before the module is on.&lt;/p&gt;
&lt;p&gt;Once the pin is set high, run the following command to open the serial port:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;picocom -b 38400 -c --omap crcrlf /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Send the following command to get the bluetooth's MAC address:&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;at+addr?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should receive something similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;+ADDR:98d3:31:b185dd
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="pair hc-05 bluetooth module to the computer"&gt;Pair HC-05 bluetooth module to the computer&lt;/h2&gt;
&lt;p&gt;For this step you need bluez-utils, which has many programs that interact with the bluetooth host controller. I didn't have to install anything since I believe this is already installed by default in the OS.&lt;/p&gt;
&lt;p&gt;It may happens the bluetooth host controller is off or blocked. In my case it was blocked so to unblock it run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo rfkill unblock 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verify that the bluetooth controller is finally up and running:&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;sudo hciconfig hci0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/hciconfig-hci0.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/hciconfig-hci0.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; before you pair the bluetooth module you have to set the pin PIO_11 (GPIO 34) to low level and then write the following command, you don't have to power off and on the module:&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;at+init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press CTRL+A+X to exit picocom, later we will use it again but with a different baudrate.&lt;/p&gt;
&lt;p&gt;Start the following program and the do scanning to discover the device:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo bluetoothctl
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/bluetoothctl-scan.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/bluetoothctl-scan.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;From the picture above we can observe the controller has found the device. To pair the computer with the bluetooth module run the following. The program will ask for the password, by default it is '1234':&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/bluetoothctl-pair.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/bluetoothctl-pair.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;To exit the program just write the command &lt;em&gt;exit&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="connect to hc-05 bluetooth module"&gt;Connect to HC-05 bluetooth module&lt;/h2&gt;
&lt;p&gt;Run the following to create a serial device for the bluetooth module, it's necessary the bluetooth's module MAC address:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo rfcomm bind hci0 98:D3:31:B1:85:DD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the commands runs successfully the character device &lt;em&gt;/dev/rfcomm0&lt;/em&gt; is created. In fact this device is a serial port.
To send text to the module open the recently created serial port with the program &lt;em&gt;picocom&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;picocom -b 115200 --imap lfcrlf --omap crcrlf /dev/rfcomm0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you open the serial port, the LED connected to PIO_09 (GPIO_32) turns on and the other LED blinks at a slower rate.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/bluetooth-connected.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/bluetooth-connected.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;In another terminal open the serial port which is connected directly to the module to receive the characters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;picocom -b 115200 --imap lfcrlf --omap crcrlf /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The picture below shows the text sent from the computer and from the bluetooth module.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/bluetooth-hc05-linux/picocom-terminals.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/bluetooth-hc05-linux/picocom-terminals.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="notes about bluetooth kernel module"&gt;Notes about bluetooth kernel module&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;RFCOMM&lt;/em&gt;&lt;/strong&gt; is a protocol which emulates a serial port connection. When we run the command &lt;em&gt;rfcomm bind&lt;/em&gt; we are telling to the kernel module &lt;em&gt;net/bluetooth/rfcomm/tty&lt;/em&gt; to create a character device which is going to be used as a serial port.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://alberand.com/hc-05-linux.html"&gt;https://alberand.com/hc-05-linux.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.wattnotions.com/using-the-hc-06-hc-05-bluetooth-adapter-for-serial-communication-with-linux/"&gt;http://www.wattnotions.com/using-the-hc-06-hc-05-bluetooth-adapter-for-serial-communication-with-linux/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category></entry><entry><title>HD44780 LCD driver for Raspberry Pi 3B</title><link href="/raspberrypi-hd44780-driver.html" rel="alternate"></link><published>2021-03-12T00:00:00-06:00</published><updated>2021-03-12T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2021-03-12:/raspberrypi-hd44780-driver.html</id><summary type="html">&lt;p&gt;I want to control a generic LCD 16x02 with a Raspberry Pi but doing it differently. Instead of using any user space program, I want a linux driver to handle the communication with the LCD. Maybe in the future I will used the LCD as a console to display info about the system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I want to control a generic LCD 16x02 with a Raspberry Pi but doing it differently. Instead of using any user space program, I want a linux driver to handle the communication with the LCD. Maybe in the future I will used the LCD as a console to display information about the system.&lt;/p&gt;
&lt;p&gt;For the following tutorial I used a Raspberry Pi 3 Model B with linux kernel version 5.4.51-v7+.&lt;/p&gt;
&lt;h2 id="already a driver available"&gt;Already a driver available&lt;/h2&gt;
&lt;p&gt;Although my initial idea was to program a kernel driver for the LCD, I found out that there are already a couple of drivers available for this device since, in old computers, the parallel port was used to communicate with LCDs. There is the mainline kernel driver and some other drivers that are for those LCDs that have a &lt;a href="https://blog.microjoe.org/2019/hd44780-lcd-i2c-screen-using-linux-mainline-charlcd-driver.html"&gt;&lt;strong&gt;PCF8574&lt;/strong&gt;&lt;/a&gt; IC. This integrated circuit saves pins because you communicate with it through I2C protocol.&lt;/p&gt;
&lt;p&gt;Additionally, the Raspberry Pi kernel image has a device tree overlay specifically for the HD44780, which defines the pins connected to the LCD. This is extremely useful since you can override these pins with those which the LCD is going to use.&lt;/p&gt;
&lt;p&gt;Even though I still wanted to get my hands on some code, I thought more about it and I decided to install the already available driver. The decision is because I still kind of a newbie in programming kernel drivers.&lt;/p&gt;
&lt;p&gt;There are two main kernel modules that control this LCD. The first one is the driver especifically for the HD44780 integrated circuit, which communicates with the LCD. The other is the kernel module &lt;em&gt;charlcd&lt;/em&gt; which serves as an interface between the user and the driver. This module receives the characters and commands that later will send to the LCD.&lt;/p&gt;
&lt;h2 id="building the circuit"&gt;Building the circuit&lt;/h2&gt;
&lt;p&gt;The following image describes which pins of the LCD are connected to the gpios on the board. I added a transistor to turn on or off the LCD's led backlight. However, for the moment connect the led backlight to 3.3v given that the driver does not control it, later we will fix this.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/raspberry-hd44780-driver/lcd-1602-circuit.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/raspberry-hd44780-driver/lcd-1602-circuit.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="hd44780 devicetree overlay"&gt;HD44780 devicetree overlay&lt;/h2&gt;
&lt;p&gt;Lucky for us, raspberry pi has an overlay for the devicetree which allows to set the pins for the LCD. The devicetree overlay is important as it defines the peripheral's pins and hardware configuration which later the driver is going to read.&lt;/p&gt;
&lt;p&gt;In the documentation are defined the parameters that have to be set to configure the LCD. It's important to notice that RW pin is not defined, this means we can't read from the LCD. Keep this in mind in when building the circuit.&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;Name:   hd44780-lcd
Info:   Configures an HD44780 compatible LCD display. Uses 4 gpio pins for
        data, 2 gpio pins for enable and register select and 1 optional pin
        for enabling/disabling the backlight display.
Load:   dtoverlay=hd44780-lcd,&lt;param&gt;=&lt;val&gt;
Params: pin_d4                  GPIO pin for data pin D4 (default 6)

        pin_d5                  GPIO pin for data pin D5 (default 13)

        pin_d6                  GPIO pin for data pin D6 (default 19)

        pin_d7                  GPIO pin for data pin D7 (default 26)

        pin_en                  GPIO pin for "Enable" (default 21)

        pin_rs                  GPIO pin for "Register Select" (default 20)

        pin_bl                  Optional pin for enabling/disabling the
                                display backlight. (default disabled)

        display_height          Height of the display in characters

        display_width           Width of the display in characters&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the &lt;em&gt;/boot/config.txt&lt;/em&gt; to add the devicetree overlay and to define the pinout for the LCD.&lt;/p&gt;
&lt;pre&gt;&lt;code class="plaintext"&gt;dtoverlay=hd44780-lcd,pin_d4=25,pin_d5=24,pin_d6=23,pin_d7=18,pin_rs=7,pin_en=8,display_width=16,display_height=2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT: Check twice that you have written correctly the dtbo overlay parameters. If there are any misspelled words, the kernel module will not get the properties from the devicetree overlay and therefore the LCD will not work.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="use the lcd"&gt;Use the LCD&lt;/h2&gt;
&lt;p&gt;If everything is connected correctly, at boot time you should see the kernel version.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/raspberry-hd44780-driver/lcd-linux-version.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/raspberry-hd44780-driver/lcd-linux-version.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;The lcd appears as a character device on the linux system. Give it write and read permissions before sending anything to it. The permissions could be also changed in a udev rule.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo chmod a+rw /dev/lcd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To send characters to the LCD execute the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;echo -ne "Raspberry PI" &amp;gt; /dev/lcd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although in the source code of &lt;em&gt;charlcd.c&lt;/em&gt; is the list of commands the interface accepts, here I post the complete list of commands for future references.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General commands and special commands:&lt;/strong&gt;

&lt;table class="table"&gt;
    
    
    &lt;thead class="thead-light"&gt;
    &lt;tr&gt;
        
        
        &lt;th scope="col"&gt;Command&lt;/th&gt;
        
        &lt;th scope="col"&gt;Description&lt;/th&gt;
        
    &lt;/tr&gt;
    &lt;/thead&gt;
    
    &lt;tbody&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\b'&lt;/td&gt;
            
            &lt;td&gt;back one character and clear it&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\014'&lt;/td&gt;
            
            &lt;td&gt;clear the display&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\n'&lt;/td&gt;
            
            &lt;td&gt;new line&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\r'&lt;/td&gt;
            
            &lt;td&gt;go to the beginning of the same line&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\t'&lt;/td&gt;
            
            &lt;td&gt;prints a space instead of a tab&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[2J'&lt;/td&gt;
            
            &lt;td&gt;clear the display&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[H'&lt;/td&gt;
            
            &lt;td&gt;set cursor at home&lt;/td&gt;
            
        &lt;/tr&gt;
        
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;
&lt;table class="table"&gt;
    
    
    &lt;thead class="thead-light"&gt;
    &lt;tr&gt;
        
        
        &lt;th scope="col"&gt;Special commands&lt;/th&gt;
        
        &lt;th scope="col"&gt;Description&lt;/th&gt;
        
    &lt;/tr&gt;
    &lt;/thead&gt;
    
    &lt;tbody&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LD'&lt;/td&gt;
            
            &lt;td&gt;display on&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Ld'&lt;/td&gt;
            
            &lt;td&gt;display off&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LC'&lt;/td&gt;
            
            &lt;td&gt;cursor on&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Lc'&lt;/td&gt;
            
            &lt;td&gt;cursor off&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LB'&lt;/td&gt;
            
            &lt;td&gt;blink on&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Lb'&lt;/td&gt;
            
            &lt;td&gt;blink off&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[L+'&lt;/td&gt;
            
            &lt;td&gt;backlight on&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[L-'&lt;/td&gt;
            
            &lt;td&gt;backlight off&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[L*'&lt;/td&gt;
            
            &lt;td&gt;flash backlight&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Lf'&lt;/td&gt;
            
            &lt;td&gt;small font&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LF'&lt;/td&gt;
            
            &lt;td&gt;large font&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Ln'&lt;/td&gt;
            
            &lt;td&gt;one line&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LN'&lt;/td&gt;
            
            &lt;td&gt;two lines&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Ll'&lt;/td&gt;
            
            &lt;td&gt;shift cursor left&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Lr'&lt;/td&gt;
            
            &lt;td&gt;shift cursor right&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LL'&lt;/td&gt;
            
            &lt;td&gt;shift display left&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LR'&lt;/td&gt;
            
            &lt;td&gt;shift display right&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[Lk'&lt;/td&gt;
            
            &lt;td&gt;kill end of line&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LI'&lt;/td&gt;
            
            &lt;td&gt;reinitialize display&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LGcxxx..xx'&lt;/td&gt;
            
            &lt;td&gt;Generate custom character. 'c' is the charcter number [0..7], 'xxx...xx' is 16 hex digits representing 8 bytes.&lt;/td&gt;
            
        &lt;/tr&gt;
        
        &lt;tr scope="row"&gt;
            
            
            &lt;td&gt;'\x1b[LxXXX[yYYY;]'&lt;/td&gt;
            
            &lt;td&gt;goto xy&lt;/td&gt;
            
        &lt;/tr&gt;
        
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;h2 id="enable backlight command"&gt;Enable backlight command&lt;/h2&gt;
&lt;p&gt;As I mentioned before, the backlight pin is not enabled by default. We can change this in the devicetree overlay. Write the following to check which pins are used in the raspberry pi:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo cat /sys/kernel/debug/gpio
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/raspberry-hd44780-driver/kernel-gpios.png"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/raspberry-hd44780-driver/kernel-gpios.png" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;We can confirm the backlight pin is not used. The solution is to edit the file &lt;em&gt;arch/arm/boot/overlay/hd44780-lcd-overlay.dts&lt;/em&gt; and replace the label &lt;strong&gt;dormant&lt;/strong&gt; with &lt;strong&gt;overlay&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;fragment@1 {
    target = &lt;&amp;lcd_screen&gt;;
    __overlay__ {
        backlight-gpios = &lt;&amp;gpio 12 0&gt;;
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To compile the overlay install the devicetree compiler and then execute the command below. This step I run it in my laptop not in the Raspberry Pi:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install device-tree-compiler
dtc -@ -I dts -O dtb -o hd44780-lcd.dtbo arch/arm/boot/dts/overlays/hd44780-lcd-overlay.dts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when the compilation finishes it shows a lot of warnings, just pay attention if an error arises due to a misspelled word.&lt;/p&gt;
&lt;p&gt;Transfer the &lt;em&gt;.dtbo&lt;/em&gt; file to the Raspberry Pi and copy it into the boot partition. In my case I setup a local connection between the Raspberry Pi and my laptop, both are connected through an ethernet cable. To transfer the file I use &lt;em&gt;scp&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;scp hd44780-lcd.dtbo pi@192.168.1.72:/home/pi

# On the Raspberry Pi:
sudo mv ~/hd44780-lcd.dtbo /boot/overlays/
sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to connect the transistor to the gpio and to the LCD. To turn on the backlight send the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;echo -ne "\x1b[L+" &amp;gt; /dev/lcd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the backlight works.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/raspberry-hd44780-driver/lcd-backlight.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/raspberry-hd44780-driver/lcd-backlight.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2 id="example: display ip address at boot time"&gt;Example: Display IP address at boot time&lt;/h2&gt;
&lt;p&gt;If you have logged into the Raspberry Pi throught the serial console, you may have noticed that during boot time, when the kernel is loading all the systemd services, it shows the IP addres of the board if it successfully connects to an existing network previously configured.&lt;/p&gt;
&lt;p&gt;The service that shows this IP address is in &lt;em&gt;/lib/systemd/system/rc-local.service&lt;/em&gt;. If we take a look inside it, the service executes the &lt;em&gt;/etc/rc.local&lt;/em&gt; file. In it are the instructions to show the IP address, let's modify it to display the IP address on the LCD.&lt;/p&gt;
&lt;p&gt;First, create the file &lt;em&gt;display_ip_addr.sh&lt;/em&gt; under the home directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd ~/
touch display_ip_addr.sh
chmod a+x display_ip_addr.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Append the following code in the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;#/bin/bash
DEV_LCD=/dev/lcd
_IP=$1
if [ -e "$DEV_LCD" ]; then
  if [ -c "$DEV_LCD" ]; then
    echo -ne "\x1b[L+\x1b[2JIP:\n$_IP" &gt; $DEV_LCD
  fi
fi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then edit the file &lt;em&gt;/etc/rc.local&lt;/em&gt;. Create a backup of this file just in case.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;...

#Print the IP address
DEV_LCD=/dev/lcd
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  if [ -e "$DEV_LCD" ]; then
    chmod a+rw $DEV_LCD
    /bin/bash /home/pi/display_ip_addr.sh $_IP
  fi
  printf "My IP address is %s\n" "$_IP"
fi

exit 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot the system. After the booting process has finished, you can see on the LCD display the linux kernel version
and the Raspberry Pi's IP address.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;figure class="figure" style="display: table;"&gt;
&lt;a data-toggle="lightbox" href="article-assets/raspberry-hd44780-driver/lcd-raspi-ip.jpg"&gt;
&lt;img class="figure-img img-fluid rounded" src="article-assets/raspberry-hd44780-driver/lcd-raspi-ip.jpg" style="width: 100%; max-width: 500px; height: auto;"/&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;That's all for now. Hope you have enjoyed this tutorial and if you have any question send me an e-mail and I'll be glad to answer.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HD44780 overlay documentation: &lt;a href="https://github.com/raspberrypi/linux/blob/rpi-5.10.y/arch/arm/boot/dts/overlays/README"&gt;https://github.com/raspberrypi/linux/blob/rpi-5.10.y/arch/arm/boot/dts/overlays/README&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;charlcd&lt;/em&gt; driver: &lt;a href="https://github.com/torvalds/linux/blob/master/drivers/auxdisplay/charlcd.c"&gt;https://github.com/torvalds/linux/blob/master/drivers/auxdisplay/charlcd.c&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;hd47780&lt;/em&gt; driver: &lt;a href="https://github.com/torvalds/linux/blob/master/drivers/auxdisplay/hd44780.c"&gt;https://github.com/torvalds/linux/blob/master/drivers/auxdisplay/hd44780.c&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="updates and fixes:"&gt;Updates and fixes:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;11/02/2023:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fix command &lt;em&gt;set cursor at home&lt;/em&gt; in table &lt;em&gt;General commands and special commands&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Fix command &lt;em&gt;goto xy&lt;/em&gt; in table &lt;em&gt;General commands and special commands&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category></entry><entry><title>My first post</title><link href="/introduction-to-this-blog.html" rel="alternate"></link><published>2021-03-10T00:00:00-06:00</published><updated>2021-03-10T00:00:00-06:00</updated><author><name>Felipe Arturo LÃ³pez Bonilla</name></author><id>tag:None,2021-03-10:/introduction-to-this-blog.html</id><summary type="html">&lt;p&gt;My name is Felipe, I'm from Mexico, and right now I'm 28 years old. I'm an embedded software developer who worked for a technology consulting company for almost 2 years and a half. The purpose of this blog is to post notes of my personal projects but also to post tutorials on the topics I'm really interested in.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to &lt;strong&gt;&lt;em&gt;Tinkering At Night&lt;/em&gt;&lt;/strong&gt; . My name is Felipe, I'm from Mexico and I'm an embedded software developer. This blogs serves as a repository for the notes in the projects I work on, but also as a guide in many of the topics I'm really interested in. But before I start writing my first tutorial, I would like to explain the reasons of why I'm taking the time to write this blog and what motivates me.
&lt;br/&gt;&lt;/p&gt;
&lt;h2 id="a little bit of my past"&gt;A little bit of my past&lt;/h2&gt;
&lt;p&gt;Since I was a teenager I was interested in engineering, specifically in microcontrollers. I was curious on how to program them and my first approach was learning assembly language for the microcontroller PIC16F84A, Arduino wasn't sell in my country at that time. As soon as I manage to run my first program on the PIC, my curiosity for learning more about these device started to growth. I recall that I lockdown my self for an entire summer to learn from different forums on how to build different projects around the PIC and read the many articles &lt;em&gt;&lt;a href="https://hackaday.com/"&gt;hackaday.com&lt;/a&gt;&lt;/em&gt; posted each week. Anyway, the sum of those experiences led me to study Mechatronics Engineering back in 2011.
&lt;br/&gt;&lt;/p&gt;
&lt;h2 id="why i'm writing this blog"&gt;Why I'm writing this blog&lt;/h2&gt;
&lt;p&gt;I have always admired the people which has the time to write about their projects they are working on and are willing to share their knowledge. My interest for embedded systems and engineering projects arises from reading many blogs and websites related to diy projects.&lt;/p&gt;
&lt;p&gt;Although I've been inspired by these people, unfortunately I didn't have, in my opinion, the knowledge but most important the complete desire and commitment to write this blog. Even though I have designed and programmed it since 2016, I hadn't made up my mind to publish it until now.&lt;/p&gt;
&lt;p&gt;Now that I have the time, but most important the enthusiasm for this blog, I'll try my best to write well explained tutorials or projects, describing each step and the tools I have used. My wish is that you learn something from each post that I write, therefore you can develop your own projects, and who knows maybe start writing your own blog.
&lt;br/&gt;&lt;/p&gt;
&lt;h2 id="the scope of this blog"&gt;The scope of this blog&lt;/h2&gt;
&lt;p&gt;I consider my self as a maker which means I'm interested in all kinds of projects. However, although I'll work with different technologies and manufacturing processes, I'll not go through the already well known path which many blogs follow. What I'm trying to say is that don't expect a tutorial of blinking leds using Arduino. Don't get me wrong, Arduino is an excellent tool for people who are starting in engineering or in making something. I had wished I had this platform before I studied engineering.&lt;/p&gt;
&lt;p&gt;I came up with this different approach when I turned a year in my job. I realized that as topics related to embedded systems become more complex and challenging there is less information, I guess because there's few people with the knowledge or with the time to dedicate a few hours to write about it in a blog.&lt;/p&gt;
&lt;p&gt;My goal with this blog is to guide you through other topics which are less common or where the information about those is scarce. For me, the purpose is to show you the next building bricks after the blinking led, which usually is more complex and more challenging.
&lt;br/&gt;&lt;/p&gt;
&lt;h2 id="last thoughts"&gt;Last thoughts&lt;/h2&gt;
&lt;p&gt;This post summarizes pretty much my intentions with this blog. I expect you enjoy each post that I publish and learn something in the way. Sorry for my english, I'll try to improve my writing skill since it's not my strongest one, even in spanish I struggle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning about this blog&lt;/strong&gt;: I don't have many knowledge in web programming, so as I continue publishing posts also I'll be working on improving the design and functioning of this site, therefore expect a lot of changes or failures, at least until I set up the whole site. Thanks for your comprehension.
&lt;br/&gt;&lt;/p&gt;</content><category term="posts"></category></entry></feed>